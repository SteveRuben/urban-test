/**
 * Import function triggers from their respective submodules:
 *
 * import {onCall} from "firebase-functions/v2/https";
 * import {onDocumentWritten} from "firebase-functions/v2/firestore";
 *
 * See a full list of supported triggers at https://firebase.google.com/docs/functions
 */

import {HttpsOptions, onRequest} from "firebase-functions/v2/https";
import * as logger from "firebase-functions/logger";
// Start writing functions
// https://firebase.google.com/docs/functions/typescript

import express from 'express';
import helmet from 'helmet';
import { corsMiddleware } from './middleware/cors.middleware';
import routes from './routes';
import { ResponseUtil } from './utils/response.util';
import { AppError } from "./utils/errors.util";
require("dotenv").config(); // Load .env variables
// Cr√©er l'application Express
const app = express();

// Middleware de s√©curit√©
app.use(helmet());
app.use(corsMiddleware);
app.use(express.urlencoded({ extended: true }));
// Parsing JSON
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));
// Logging pour le d√©veloppement
if (process.env.NODE_ENV !== 'production') {
  app.use((req, res, next) => {
    logger.info(`${req.method} ${req.path}`, {
      method: req.method,
      path: req.path,
      ip: req.ip,
      userAgent: req.get('User-Agent')
    });
    next();
  });
}
// Routes principales
app.use('/api/v1', routes);
// Route de test simple avec param√®tre
app.get('/api/v1/test/:id', (req, res) => {
  res.json({
    message: 'Test route with parameter',
    id: req.params.id
  });
});

// Middleware de gestion d'erreurs globales
app.use((error: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  logger.error('Erreur non g√©r√©e:', {
    error: error.message,
    stack: error.stack,
    method: req.method,
    path: req.path,
    body: req.body,
    timestamp: new Date().toISOString()
  });

  // Erreur personnalis√©e
  if (error instanceof AppError) {
    ResponseUtil.error(res, error.message, error.statusCode);
    return;
  }
  
  // Erreur de parsing JSON
  if (error.type === 'entity.parse.failed') {
    ResponseUtil.validationError(res, 'JSON invalide');
    return;
  }
  
  // Erreur de payload trop large
  if (error.type === 'entity.too.large') {
    ResponseUtil.validationError(res, 'Payload trop volumineux');
    return;
  }

  // Erreurs Firebase sp√©cifiques
  if (error.code) {
    switch (error.code) {
      case 'auth/id-token-expired':
        ResponseUtil.unauthorized(res, 'Token expir√©');
        return;
      case 'auth/id-token-revoked':
        ResponseUtil.unauthorized(res, 'Token r√©voqu√©');
        return;
      case 'auth/invalid-id-token':
        ResponseUtil.unauthorized(res, 'Token invalide');
        return;
      case 'permission-denied':
        ResponseUtil.forbidden(res, 'Acc√®s refus√©');
        return;
      case 'not-found':
        ResponseUtil.notFound(res, 'Ressource non trouv√©e');
        return;
    }
  }

  // Erreur g√©n√©rique
  ResponseUtil.serverError(res, 'Erreur interne du serveur');
});
// Route racine
app.get('/', (req, res) => {
  res.json({
    message: 'API G√©n√©rateur de Lettres de Motivation',
    version: '1.0.0',
    status: 'running',
    timestamp: new Date().toISOString()
  });
});

// Middleware de gestion d'erreurs globales


// Route 404
app.use('*', (req, res) => {
  ResponseUtil.notFound(res, `Route non trouv√©e: ${req.method} ${req.originalUrl}`);
});

// Exporter la fonction Firebase (correction du probl√®me TypeScript)
// Configuration des options HTTPS
const runtimeOpts: HttpsOptions = {
  timeoutSeconds: 300,
  memory: "1GiB" as const,
  region: "europe-west1",
  concurrency: 10,
  minInstances: process.env.NODE_ENV === "production" ? 1 : 0,
  maxInstances: process.env.NODE_ENV === "production" ? 10 : 3,
};
export const api = onRequest(runtimeOpts, app);


// Pour le d√©veloppement local avec Firebase Emulator
if (process.env.NODE_ENV !== 'production') {
  console.log('üî• Mode d√©veloppement activ√©');
  console.log('üìç API disponible sur: http://localhost:5001/[PROJECT_ID]/europe-west1/api');
  console.log('‚ù§Ô∏è  Health check sur: http://localhost:5001/[PROJECT_ID]/europe-west1/api/api/v1/health');
}

// Export par d√©faut pour √©viter les probl√®mes TypeScript
export default app;