#!/bin/bash

# Script de test pour Cover Letter Generator API
# Usage: ./test_clg_api.sh

echo "üöÄ Test de l'API Cover Letter Generator"
echo "======================================"

# Variables sp√©cifiques √† votre projet
PROJECT_ID="cover-letter-generator-api"
BASE_URL="http://localhost:5001/$PROJECT_ID/europe-west1/api"
HEALTH_URL="$BASE_URL/api/v1/health"
API_KEY="AIzaSyBYTtM1eNt0BDI4oafZEGxLBnKLQpBr2JM"

# V√©rification du dossier functions
if [ ! -d "functions" ]; then
    echo "‚ùå Dossier functions/ non trouv√©. √ätes-vous dans le bon r√©pertoire ?"
    exit 1
fi

cd functions

# 1. V√©rification du fichier .env
echo "1Ô∏è‚É£ V√©rification de la configuration..."
if [ ! -f ".env" ]; then
    echo "‚ùå Fichier .env manquant"
    echo "üìù Cr√©ez le fichier .env avec vos variables CLG_*"
    exit 1
fi

# V√©rifier les variables importantes
if ! grep -q "CLG_PROJECT_ID=cover-letter-generator-api" .env; then
    echo "‚ö†Ô∏è  Variable CLG_PROJECT_ID non trouv√©e ou incorrecte"
fi

if ! grep -q "CLG_CLIENT_EMAIL=firebase-adminsdk-fbsvc@" .env; then
    echo "‚ö†Ô∏è  Variable CLG_CLIENT_EMAIL non trouv√©e ou incorrecte"
fi

if grep -q "CLG_PRIVATE_KEY=\"n\"" .env; then
    echo "‚ùå CLG_PRIVATE_KEY incomplete ! Vous devez mettre la cl√© priv√©e compl√®te du fichier JSON Firebase"
    echo "üìã Format attendu: CLG_PRIVATE_KEY=\"-----BEGIN PRIVATE KEY-----\\nVOTRE_CLE\\n-----END PRIVATE KEY-----\\n\""
    exit 1
fi

echo "‚úÖ Configuration de base OK"

# 2. Test de compilation
echo ""
echo "2Ô∏è‚É£ Test de compilation..."
npm run build
if [ $? -ne 0 ]; then
    echo "‚ùå Erreur de compilation TypeScript"
    exit 1
fi
echo "‚úÖ Compilation r√©ussie"

# 3. D√©marrage de l'√©mulateur
echo ""
echo "3Ô∏è‚É£ D√©marrage de l'√©mulateur..."
npm run serve > emulator.log 2>&1 &
EMULATOR_PID=$!

# Attendre le d√©marrage
echo "‚è≥ Attente du d√©marrage (max 60s)..."
for i in {1..30}; do
    if curl -s "$HEALTH_URL" > /dev/null 2>&1; then
        echo "‚úÖ √âmulateur d√©marr√©"
        break
    fi
    sleep 2
    if [ $i -eq 30 ]; then
        echo "‚ùå Timeout - √âmulateur non accessible"
        echo "üìã Logs:"
        tail -20 emulator.log
        kill $EMULATOR_PID 2>/dev/null
        exit 1
    fi
done

# 4. Tests des endpoints
echo ""
echo "4Ô∏è‚É£ Tests des endpoints..."

echo "üîç Test route de sant√©..."
HEALTH_RESPONSE=$(curl -s "$HEALTH_URL")
if echo "$HEALTH_RESPONSE" | grep -q "status.*OK"; then
    echo "‚úÖ Route de sant√© OK"
else
    echo "‚ùå Route de sant√© √©chou√©e"
    echo "Response: $HEALTH_RESPONSE"
fi

echo ""
echo "üîç Test route racine..."
ROOT_RESPONSE=$(curl -s "$BASE_URL/")
if echo "$ROOT_RESPONSE" | grep -q "G√©n√©rateur de Lettres de Motivation"; then
    echo "‚úÖ Route racine OK"
else
    echo "‚ùå Route racine √©chou√©e"
fi

echo ""
echo "üîç Test route 404..."
NOT_FOUND=$(curl -s "$BASE_URL/api/v1/inexistant")
if echo "$NOT_FOUND" | grep -q "Route non trouv√©e"; then
    echo "‚úÖ Gestion 404 OK"
else
    echo "‚ùå Gestion 404 √©chou√©e"
fi

echo ""
echo "üîç Test protection auth..."
PROTECTED=$(curl -s "$BASE_URL/api/v1/users/profile")
if echo "$PROTECTED" | grep -q "Token d'authentification manquant"; then
    echo "‚úÖ Protection auth OK"
else
    echo "‚ùå Protection auth √©chou√©e"
fi

# 5. Test avec authentification Firebase
echo ""
echo "5Ô∏è‚É£ Test d'authentification Firebase..."
echo "üìß Cr√©ation d'un token test avec Firebase Auth..."

# Test de cr√©ation de compte
AUTH_RESPONSE=$(curl -s -X POST "https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=$API_KEY" \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com","password":"password123","returnSecureToken":true}' 2>/dev/null)

if echo "$AUTH_RESPONSE" | grep -q "idToken"; then
    TOKEN=$(echo "$AUTH_RESPONSE" | grep -o '"idToken":"[^"]*"' | cut -d'"' -f4)
    echo "‚úÖ Token Firebase cr√©√©"
    
    # Test cr√©ation utilisateur
    echo ""
    echo "üë§ Test cr√©ation utilisateur..."
    USER_CREATE=$(curl -s -X POST "$BASE_URL/api/v1/users" \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $TOKEN" \
      -d '{"displayName": "Test User CLG"}')
    
    if echo "$USER_CREATE" | grep -q "Utilisateur cr√©√© avec succ√®s"; then
        echo "‚úÖ Cr√©ation utilisateur OK"
    else
        echo "‚ö†Ô∏è  Cr√©ation utilisateur: $USER_CREATE"
    fi
    
    # Test r√©cup√©ration profil
    echo ""
    echo "üìã Test r√©cup√©ration profil..."
    PROFILE=$(curl -s -X GET "$BASE_URL/api/v1/users/profile" \
      -H "Authorization: Bearer $TOKEN")
    
    if echo "$PROFILE" | grep -q "Test User CLG"; then
        echo "‚úÖ R√©cup√©ration profil OK"
    else
        echo "‚ö†Ô∏è  R√©cup√©ration profil: $PROFILE"
    fi
    
else
    echo "‚ö†Ô∏è  Impossible de cr√©er un token Firebase"
    echo "V√©rifiez que Firebase Auth est activ√© dans votre console"
fi

# 6. R√©sum√©
echo ""
echo "üìä R√âSUM√â DES TESTS"
echo "=================="
echo "‚úÖ Configuration variables"
echo "‚úÖ Compilation TypeScript"
echo "‚úÖ D√©marrage √©mulateur"
echo "‚úÖ Routes de base"
echo "‚úÖ Protection authentification"
echo "‚úÖ Int√©gration Firebase Auth"

echo ""
echo "üéâ API fonctionnelle !"
echo ""
echo "üìã Prochaines √©tapes :"
echo "1. Compl√©tez CLG_PRIVATE_KEY dans .env si pas fait"
echo "2. Testez manuellement avec votre frontend"
echo "3. Impl√©mentez les services de lettres"

# Nettoyage
echo ""
echo "üõë Arr√™t de l'√©mulateur..."
kill $EMULATOR_PID 2>/dev/null
rm -f emulator.log

echo "‚ú® Test termin√© !"