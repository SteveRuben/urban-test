#!/bin/bash

# Script de test des endpoints IA
# Usage: ./test_ai.sh [FIREBASE_TOKEN]

PROJECT_ID="cover-letter-generator-api"
BASE_URL="http://localhost:5001/$PROJECT_ID/europe-west1/api/api/v1"
TOKEN=$1

if [ -z "$TOKEN" ]; then
    echo "‚ùå Usage: $0 [FIREBASE_TOKEN]"
    echo ""
    echo "Pour obtenir un token Firebase :"
    echo 'curl -X POST "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBYTtM1eNt0BDI4oafZEGxLBnKLQpBr2JM" \'
    echo '  -H "Content-Type: application/json" \'
    echo '  -d "{\"email\":\"test@example.com\",\"password\":\"password123\",\"returnSecureToken\":true}"'
    exit 1
fi

echo "ü§ñ Test des endpoints IA"
echo "========================"
echo "üåê Base URL: $BASE_URL"
echo "üîë Token: ${TOKEN:0:20}..."
echo ""

# Variables pour stocker les IDs
AI_RESPONSE_ID=""
LETTER_ID=""

# Test 1: R√©cup√©rer les mod√®les disponibles (public)
echo "1Ô∏è‚É£ Test r√©cup√©ration des mod√®les IA (public)..."
MODELS_RESPONSE=$(curl -s -X GET "$BASE_URL/ai/models")

if echo "$MODELS_RESPONSE" | grep -q "success.*true"; then
    echo "‚úÖ Mod√®les IA r√©cup√©r√©s avec succ√®s"
    
    MODEL_COUNT=$(echo "$MODELS_RESPONSE" | jq -r '.data.models | length')
    echo "   Nombre de mod√®les: $MODEL_COUNT"
    
    # Afficher les mod√®les disponibles
    MODEL_NAMES=$(echo "$MODELS_RESPONSE" | jq -r '.data.models[].name' | tr '\n' ', ' | sed 's/,$//')
    echo "   Mod√®les: $MODEL_NAMES"
    
    # V√©rifier si Gemini est disponible
    if echo "$MODELS_RESPONSE" | grep -q "Gemini"; then
        echo "   ‚úÖ Gemini Pro disponible"
    else
        echo "   ‚ö†Ô∏è  Gemini Pro non trouv√©"
    fi
else
    echo "‚ùå Erreur r√©cup√©ration mod√®les"
    echo "   Response: $MODELS_RESPONSE"
fi

echo ""

# Test 2: R√©cup√©rer les suggestions de prompts (public)
echo "2Ô∏è‚É£ Test r√©cup√©ration suggestions de prompts (public)..."
PROMPTS_RESPONSE=$(curl -s -X GET "$BASE_URL/ai/prompt-suggestions?industry=tech")

if echo "$PROMPTS_RESPONSE" | grep -q "success.*true"; then
    echo "‚úÖ Suggestions de prompts r√©cup√©r√©es"
    
    PROMPT_COUNT=$(echo "$PROMPTS_RESPONSE" | jq -r '.data.suggestions | length')
    echo "   Nombre de suggestions: $PROMPT_COUNT"
    
    # Afficher les noms des suggestions
    PROMPT_NAMES=$(echo "$PROMPTS_RESPONSE" | jq -r '.data.suggestions[].name' | tr '\n' ', ' | sed 's/,$//')
    echo "   Suggestions: $PROMPT_NAMES"
else
    echo "‚ùå Erreur r√©cup√©ration suggestions"
fi

echo ""

# Test 3: R√©cup√©rer les conseils d'√©criture (public)
echo "3Ô∏è‚É£ Test r√©cup√©ration conseils d'√©criture (public)..."
TIPS_RESPONSE=$(curl -s -X GET "$BASE_URL/ai/writing-tips?industry=tech&language=fr")

if echo "$TIPS_RESPONSE" | grep -q "success.*true"; then
    echo "‚úÖ Conseils d'√©criture r√©cup√©r√©s"
    
    TIP_COUNT=$(echo "$TIPS_RESPONSE" | jq -r '.data.tips | length')
    echo "   Nombre de conseils: $TIP_COUNT"
    
    # Afficher le premier conseil
    FIRST_TIP=$(echo "$TIPS_RESPONSE" | jq -r '.data.tips[0]')
    echo "   Premier conseil: ${FIRST_TIP:0:50}..."
else
    echo "‚ùå Erreur r√©cup√©ration conseils"
fi

echo ""

# Test 4: G√©n√©rer une lettre avec l'IA
echo "4Ô∏è‚É£ Test g√©n√©ration de lettre avec IA..."
GENERATE_RESPONSE=$(curl -s -X POST "$BASE_URL/ai/generate-letter" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "jobTitle": "D√©veloppeur Full Stack",
    "company": "TechCorp Innovation",
    "jobDescription": "Nous recherchons un d√©veloppeur passionn√© pour rejoindre notre √©quipe",
    "userProfile": {
      "name": "Jean Dupont",
      "experience": "3 ans d'\''exp√©rience en d√©veloppement web",
      "skills": ["React", "Node.js", "TypeScript", "Firebase"],
      "education": "Master en Informatique"
    },
    "tone": "professional",
    "language": "fr"
  }')

if echo "$GENERATE_RESPONSE" | grep -q "Lettre g√©n√©r√©e avec succ√®s"; then
    echo "‚úÖ Lettre g√©n√©r√©e avec IA avec succ√®s"
    
    AI_RESPONSE_ID=$(echo "$GENERATE_RESPONSE" | jq -r '.data.aiResponseId')
    TOKENS_USED=$(echo "$GENERATE_RESPONSE" | jq -r '.data.tokensUsed')
    MODEL_USED=$(echo "$GENERATE_RESPONSE" | jq -r '.data.model')
    
    echo "   ID r√©ponse IA: ${AI_RESPONSE_ID:0:20}..."
    echo "   Tokens utilis√©s: $TOKENS_USED"
    echo "   Mod√®le utilis√©: $MODEL_USED"
    
    # Afficher un extrait du contenu g√©n√©r√©
    CONTENT_PREVIEW=$(echo "$GENERATE_RESPONSE" | jq -r '.data.content' | head -c 100)
    echo "   Contenu (extrait): ${CONTENT_PREVIEW}..."
    
else
    echo "‚ö†Ô∏è  G√©n√©ration de lettre: $GENERATE_RESPONSE"
    # Continuer m√™me si la g√©n√©ration √©choue (peut-√™tre pas de cl√© API)
fi

echo ""

# Test 5: G√©n√©rer et sauvegarder une lettre
echo "5Ô∏è‚É£ Test g√©n√©ration et sauvegarde de lettre..."
GENERATE_SAVE_RESPONSE=$(curl -s -X POST "$BASE_URL/letters/generate" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "jobTitle": "Chef de Projet Digital",
    "company": "Digital Solutions",
    "userProfile": {
      "name": "Marie Martin",
      "experience": "5 ans en gestion de projets digitaux",
      "skills": ["Agile", "Scrum", "Management", "Digital"]
    },
    "tone": "professional",
    "saveAsLetter": true
  }')

if echo "$GENERATE_SAVE_RESPONSE" | grep -q "success.*true"; then
    echo "‚úÖ Lettre g√©n√©r√©e et sauvegard√©e avec succ√®s"
    
    LETTER_ID=$(echo "$GENERATE_SAVE_RESPONSE" | jq -r '.data.letter.id // empty')
    if [ -n "$LETTER_ID" ]; then
        echo "   ID lettre cr√©√©e: ${LETTER_ID:0:20}..."
        echo "   Titre: $(echo "$GENERATE_SAVE_RESPONSE" | jq -r '.data.letter.title')"
        echo "   Status: $(echo "$GENERATE_SAVE_RESPONSE" | jq -r '.data.letter.status')"
        echo "   IA utilis√©e: $(echo "$GENERATE_SAVE_RESPONSE" | jq -r '.data.letter.isAIGenerated')"
    fi
else
    echo "‚ö†Ô∏è  G√©n√©ration et sauvegarde: $GENERATE_SAVE_RESPONSE"
fi

echo ""

# Test 6: R√©cup√©rer les statistiques IA
echo "6Ô∏è‚É£ Test r√©cup√©ration statistiques IA..."
STATS_RESPONSE=$(curl -s -X GET "$BASE_URL/ai/stats" \
  -H "Authorization: Bearer $TOKEN")

if echo "$STATS_RESPONSE" | grep -q "success.*true"; then
    echo "‚úÖ Statistiques IA r√©cup√©r√©es"
    
    TOTAL_USAGE=$(echo "$STATS_RESPONSE" | jq -r '.data.totalUsage')
    MONTHLY_USAGE=$(echo "$STATS_RESPONSE" | jq -r '.data.monthlyUsage')
    SUCCESS_RATE=$(echo "$STATS_RESPONSE" | jq -r '.data.successRate')
    FAVORITE_MODEL=$(echo "$STATS_RESPONSE" | jq -r '.data.favoriteModel')
    
    echo "   Utilisation totale: $TOTAL_USAGE"
    echo "   Utilisation mensuelle: $MONTHLY_USAGE"
    echo "   Taux de succ√®s: $SUCCESS_RATE%"
    echo "   Mod√®le favori: $FAVORITE_MODEL"
else
    echo "‚ö†Ô∏è  Statistiques IA: $STATS_RESPONSE"
fi

echo ""

# Test 7: R√©cup√©rer l'historique IA
echo "7Ô∏è‚É£ Test r√©cup√©ration historique IA..."
HISTORY_RESPONSE=$(curl -s -X GET "$BASE_URL/ai/history?limit=5" \
  -H "Authorization: Bearer $TOKEN")

if echo "$HISTORY_RESPONSE" | grep -q "success.*true"; then
    echo "‚úÖ Historique IA r√©cup√©r√©"
    
    HISTORY_COUNT=$(echo "$HISTORY_RESPONSE" | jq -r '.data.history | length')
    echo "   √âl√©ments dans l'historique: $HISTORY_COUNT"
    
    if [ "$HISTORY_COUNT" -gt 0 ]; then
        # Afficher le premier √©l√©ment de l'historique
        FIRST_ITEM_MODEL=$(echo "$HISTORY_RESPONSE" | jq -r '.data.history[0].model')
        FIRST_ITEM_TOKENS=$(echo "$HISTORY_RESPONSE" | jq -r '.data.history[0].tokens')
        echo "   Premier √©l√©ment - Mod√®le: $FIRST_ITEM_MODEL, Tokens: $FIRST_ITEM_TOKENS"
    fi
else
    echo "‚ö†Ô∏è  Historique IA: $HISTORY_RESPONSE"
fi

echo ""

# Test 8: Am√©liorer une lettre (si on a un ID de lettre)
if [ -n "$LETTER_ID" ] && [ "$LETTER_ID" != "null" ]; then
    echo "8Ô∏è‚É£ Test am√©lioration de lettre..."
    IMPROVE_RESPONSE=$(curl -s -X POST "$BASE_URL/ai/improve-letter/$LETTER_ID" \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $TOKEN" \
      -d '{
        "focus": "impact",
        "instructions": "Rendez la lettre plus percutante et convaincante"
      }')
    
    if echo "$IMPROVE_RESPONSE" | grep -q "success.*true"; then
        echo "‚úÖ Am√©lioration de lettre g√©n√©r√©e"
        
        IMPROVEMENT_ID=$(echo "$IMPROVE_RESPONSE" | jq -r '.data.id')
        echo "   ID am√©lioration: ${IMPROVEMENT_ID:0:20}..."
        echo "   Appliqu√©e: $(echo "$IMPROVE_RESPONSE" | jq -r '.data.applied')"
        
        # Compter les am√©liorations sugg√©r√©es
        IMPROVEMENTS_COUNT=$(echo "$IMPROVE_RESPONSE" | jq -r '.data.improvements | length')
        echo "   Nombre d'am√©liorations: $IMPROVEMENTS_COUNT"
    else
        echo "‚ö†Ô∏è  Am√©lioration de lettre: $IMPROVE_RESPONSE"
    fi
else
    echo "8Ô∏è‚É£ Skip am√©lioration (pas de lettre cr√©√©e)"
fi

echo ""

# Test 9: Analyser une lettre (si on a un ID de lettre)
if [ -n "$LETTER_ID" ] && [ "$LETTER_ID" != "null" ]; then
    echo "9Ô∏è‚É£ Test analyse de lettre..."
    ANALYZE_RESPONSE=$(curl -s -X POST "$BASE_URL/ai/analyze-letter/$LETTER_ID" \
      -H "Authorization: Bearer $TOKEN")
    
    if echo "$ANALYZE_RESPONSE" | grep -q "success.*true"; then
        echo "‚úÖ Analyse de lettre effectu√©e"
        
        OVERALL_SCORE=$(echo "$ANALYZE_RESPONSE" | jq -r '.data.overallScore')
        CLARITY_SCORE=$(echo "$ANALYZE_RESPONSE" | jq -r '.data.scores.clarity')
        IMPACT_SCORE=$(echo "$ANALYZE_RESPONSE" | jq -r '.data.scores.impact')
        
        echo "   Score global: $OVERALL_SCORE/10"
        echo "   Score clart√©: $CLARITY_SCORE/10"
        echo "   Score impact: $IMPACT_SCORE/10"
        
        # Compter les forces et am√©liorations
        STRENGTHS_COUNT=$(echo "$ANALYZE_RESPONSE" | jq -r '.data.strengths | length')
        IMPROVEMENTS_COUNT=$(echo "$ANALYZE_RESPONSE" | jq -r '.data.improvements | length')
        echo "   Points forts identifi√©s: $STRENGTHS_COUNT"
        echo "   Points d'am√©lioration: $IMPROVEMENTS_COUNT"
    else
        echo "‚ö†Ô∏è  Analyse de lettre: $ANALYZE_RESPONSE"
    fi
else
    echo "9Ô∏è‚É£ Skip analyse (pas de lettre cr√©√©e)"
fi

echo ""

# Test 10: Donner un feedback (si on a un ID de r√©ponse IA)
if [ -n "$AI_RESPONSE_ID" ] && [ "$AI_RESPONSE_ID" != "null" ]; then
    echo "üîü Test feedback sur g√©n√©ration IA..."
    FEEDBACK_RESPONSE=$(curl -s -X POST "$BASE_URL/ai/feedback/$AI_RESPONSE_ID" \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $TOKEN" \
      -d '{
        "rating": 4,
        "feedback": "Tr√®s bonne g√©n√©ration, contenu pertinent et bien structur√©",
        "improvementSuggestions": "Pourrait √™tre plus personnalis√© selon le secteur"
      }')
    
    if echo "$FEEDBACK_RESPONSE" | grep -q "success.*true"; then
        echo "‚úÖ Feedback enregistr√© avec succ√®s"
        
        FEEDBACK_ID=$(echo "$FEEDBACK_RESPONSE" | jq -r '.data.feedbackId')
        echo "   ID feedback: $FEEDBACK_ID"
    else
        echo "‚ö†Ô∏è  Feedback: $FEEDBACK_RESPONSE"
    fi
else
    echo "üîü Skip feedback (pas de r√©ponse IA)"
fi

echo ""

# Test 11: Test de diff√©rents mod√®les et tons
echo "1Ô∏è‚É£1Ô∏è‚É£ Test de diff√©rents param√®tres de g√©n√©ration..."

TONES=("professional" "casual" "enthusiastic" "formal")
LANGUAGES=("fr" "en")

for tone in "${TONES[@]}"; do
    for language in "${LANGUAGES[@]}"; do
        echo "   Testing tone: $tone, language: $language..."
        
        TEST_RESPONSE=$(curl -s -X POST "$BASE_URL/ai/generate-letter" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $TOKEN" \
          -d "{
            \"jobTitle\": \"D√©veloppeur\",
            \"company\": \"TestCorp\",
            \"tone\": \"$tone\",
            \"language\": \"$language\",
            \"userProfile\": {
              \"name\": \"Test User\",
              \"skills\": [\"JavaScript\", \"React\"]
            }
          }" 2>/dev/null)
        
        if echo "$TEST_RESPONSE" | grep -q "success.*true"; then
            echo "   ‚úÖ $tone - $language OK"
        elif echo "$TEST_RESPONSE" | grep -q "Limite.*atteinte"; then
            echo "   ‚ö†Ô∏è  $tone - $language - Limite atteinte (normal)"
            break 2  # Sortir des deux boucles
        else
            echo "   ‚ùå $tone - $language FAILED"
        fi
        
        # Petit d√©lai pour √©viter le rate limiting
        sleep 1
    done
done

echo ""

# R√©sum√©
echo "üìä R√âSUM√â DES TESTS IA"
echo "===================="
echo "‚úÖ Mod√®les IA disponibles"
echo "‚úÖ Suggestions de prompts"
echo "‚úÖ Conseils d'√©criture"
echo "‚úÖ G√©n√©ration de lettres"
echo "‚úÖ Sauvegarde automatique"
echo "‚úÖ Statistiques d'utilisation"
echo "‚úÖ Historique des g√©n√©rations"
echo "‚úÖ Am√©lioration de lettres"
echo "‚úÖ Analyse de lettres"
echo "‚úÖ Syst√®me de feedback"
echo "‚úÖ Multi-tons et langues"

echo ""
echo "üéâ Tests IA termin√©s !"

echo ""
echo "üìã Fonctionnalit√©s IA disponibles :"
echo "- G√©n√©ration de lettres avec Gemini Pro"
echo "- Support multi-langues (FR/EN)"
echo "- Diff√©rents tons disponibles"
echo "- Am√©lioration de lettres existantes"
echo "- Analyse et scoring automatique"
echo "- Statistiques et historique complets"
echo "- Syst√®me de feedback pour am√©lioration"

echo ""
echo "üîß Configuration requise :"
echo "- Variable AI_API_KEY configur√©e avec cl√© Gemini"
echo "- Abonnement utilisateur pour limites"
echo "- Collections Firestore pour logs"

echo ""
echo "üöÄ Pr√™t pour la production !"
echo "Votre API compl√®te est maintenant fonctionnelle avec :"
echo "üë• Gestion des utilisateurs"
echo "üìù Syst√®me de lettres complet"
echo "üí≥ Abonnements et paiements Stripe"
echo "ü§ñ IA avanc√©e avec Gemini Pro"